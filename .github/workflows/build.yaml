name: build-test
run-name: Build & Test

env:
  VA_SRC_PYTHON: src/visualacuity-python
  CORE_PACKAGE: visualacuity

on:
  push:
    branches:
#      - main
      - BuildActions
  pull_request:
    branches:
      - main

jobs:
  vendor:
    name: "‚öôÔ∏è Rust Vendoring ‚öôÔ∏è"
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.target-dir.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v3

      - name: "Cache"
        id: cached-build
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/vendor/
            ~/.cargo/config.toml
          key: rust-vendor
          lookup-only: true

      - name: "Vendor"
        if: ${{ steps.cached-build.outputs.cache-hit != 'true' }}
        run: |
          cargo vendor --verbose
          mv vendor ~
          cp vendor.toml ~/.cargo/config.toml


  build-core:
    name: "‚öôÔ∏è Rust Library ‚öôÔ∏è"
    needs: vendor
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.target-dir.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v3

      - name: "Cache"
        id: cached-build
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            target/
            ~/vendor/
            ~/.cargo/config.toml
          key: rust-${{ matrix.system.os }}-${{ matrix.system.target }}-${{ hashFiles('Cargo.toml', 'src/visualacuity/**') }}
          restore-keys: rust-vendor
          lookup-only: true

      - name: "Build"
        if: ${{ steps.cached-build.outputs.cache-hit != 'true' }}
        run: cargo build --verbose --package visualacuity

      - name: "Test"
        if: ${{ steps.cached-build.outputs.cache-hit != 'true' }}
        run: cargo test --verbose --package visualacuity

  build-python:
    name: "üêç Python Wheel üêç"
    needs: vendor
    strategy:
      matrix:
        system:
          - { os: ubuntu-latest, target: x86_64, architecture: x64 }
          #          - { os: ubuntu-latest, target: x86, architecture: x86 }
          #          - { os: ubuntu-latest, target: aarch64, architecture: arm64 }
          #          - { os: ubuntu-latest, target: armv7, architecture: x64 }
          #          - { os: ubuntu-latest, target: s390x, architecture: x64 }
          #          - { os: ubuntu-latest, target: ppc64le, architecture: x64 }
          - { os: windows-latest, target: x64, architecture: x64 }
          #          - { os: windows-latest, target: x86, architecture: x86 }
          - { os: macos-latest, target: x86_64, architecture: x64 }
          - { os: macos-latest, target: aarch64, architecture: arm64 }
        python-version:
          - "3.11"
    runs-on: ${{ matrix.system.os }}
    steps:
      - uses: actions/checkout@v3

      - name: "Cache"
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/vendor/
            ~/.cargo/config.toml
          key: rust-vendor

      - name: "Set up Python ${{ matrix.python-version }}_${{ matrix.system.architecture}}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.system.architecture }}

      - name: "Install Python Build Dependencies"
        run: pip install -r ${{ env.VA_SRC_PYTHON }}/requirements.txt

      - name: "Build sdist"
        if: matrix.system.os == 'ubuntu-latest' && matrix.system.target == 'x86_64'
        run: maturin sdist --out dist --manifest-path src/visualacuity-python/Cargo.toml

      - name: "Build wheel"
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.system.target }}
          args: --release --out dist --manifest-path ${{ env.VA_SRC_PYTHON }}/Cargo.toml
          sccache: 'true'
          manylinux: auto

      - name: "Upload"
        uses: actions/upload-artifact@v3
        with:
          name: python-wheels
          path: dist


  test-python:
    name: "üêç Python Tests üêç"
    needs: build-python
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Download wheel"
        uses: actions/download-artifact@v3
        with:
          name: python-wheels
          path: dist

      - name: "Install wheel"
        run: pip install visualacuity-preview --find-links dist --force-reinstall

      - name: "Test with pytest"
        run: |
          pip install pytest pytest-subtests pytest-cov
          mv src/visualacuity-python/tests .
          pytest tests --doctest-modules --junitxml=reports/python-test-report.xml # --cov=com --cov-report=xml --cov-report=html
  #      - name: "Test Report"
  #        if: success() || failure()
  #        uses: dorny/test-reporter@v1
  #        with:
  #          name: python-test-report-${{ matrix.python-version }}
  #          path: reports/python-test-report.xml
  #          reporter: jest-junit

  publish-python:
      name: "üêç Python Publish üêç"
      runs-on: ubuntu-latest
      needs: test-python

      steps:
        - uses: actions/checkout@v3

        - name: "Download wheels"
          uses: actions/download-artifact@v3
          with:
            name: python-wheels
            path: dist

        - name: "Set tag"
          run:
            PACKAGE_VERSION=$(echo dist/*.tar.gz | sed -e 's/.*-\(.*\)\.tar\.gz/\1/')
            git tag python-$(PACKAGE_VERSION)

        - name: "Upload binaries to release"
          uses: svenstaro/upload-release-action@v2
          with:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
            file: dist/*
            tag: refs/tags/python-latest # ${{ github.ref }}
            overwrite: true
            file_glob: true

#        - name: Publish package
#          uses: pypa/gh-action-pypi-publish@v1
#          with:
#            password: ${{ secrets.PYPI_API_TOKEN }}

#  release:
#    name: Release
#    runs-on: ubuntu-latest
#    if: "startsWith(github.ref, 'refs/tags/')"
#    needs: [linux, windows, macos, sdist]
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: wheels
#      - name: Publish to PyPI
#        uses: PyO3/maturin-action@v1
#        env:
#          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
#        with:
#          command: upload
#          args: --non-interactive --skip-existing *
