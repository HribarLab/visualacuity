# To publish a package to PyPI, create and push a tag formatted like "python-0.1.0a1"

name: build-test
run-name: Build & Test

env:
  VA_SRC_PYTHON: src/visualacuity-python
  CORE_PACKAGE: visualacuity

on:
  push:
    branches:
      - main
      - BuildActions
    tags:
      - "python-*"
      - "test-python-*"
  pull_request:
    branches:
      - main

jobs:
  vendor:
    name: "⚙️ Rust Pre-build ⚙️"
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.target-dir.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      - name: "Cache"
        id: cached-build
        uses: actions/cache@v4
        continue-on-error: false
        with:
          enableCrossOsArchive: true
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/config.toml
          key: rust-prebuild-${{ hashFiles('**/Cargo.toml') }}
          lookup-only: true

      - name: "Making 'fetch' happen"
        if: ${{ steps.cached-build.outputs.cache-hit != 'true' }}
        run: cargo fetch --verbose


  build-core:
    name: "⚙️ Rust Library ⚙️"
    needs: vendor
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.target-dir.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      - name: "Cache"
        id: cached-build
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            target/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/config.toml
          key: rust-${{ matrix.system.os }}-${{ matrix.system.target }}-${{ hashFiles('Cargo.toml', 'src/visualacuity/**') }}
          restore-keys: rust-prebuild-${{ hashFiles('**/Cargo.toml') }}
          lookup-only: true

      - name: "Build"
        if: ${{ steps.cached-build.outputs.cache-hit != 'true' }}
        run: cargo build --verbose --package visualacuity

      - name: "Test"
        if: ${{ steps.cached-build.outputs.cache-hit != 'true' }}
        run: cargo test --verbose --package visualacuity

  build-python:
    name: "🐍 Python Wheel 🐍"
    needs: vendor
    strategy:
      matrix:
        system:
          - { os: ubuntu-latest, target: x86_64, architecture: x64 }
          - { os: windows-latest, target: x64, architecture: x64 }
          - { os: macos-latest, target: x86_64, architecture: x64 }
          - { os: macos-latest, target: aarch64, architecture: arm64 }
        python-version:
          - "3.11"
    runs-on: ${{ matrix.system.os }}
    steps:
      - uses: actions/checkout@v4

      - name: "Cache"
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            target/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/config.toml
          key: python-${{ matrix.python-version }}-${{ matrix.system.os }}-${{ matrix.system.target }}--${{ hashFiles('Cargo.toml', 'src/visualacuity/**', 'src/visualacuity-python/**') }}
          restore-keys: rust-prebuild-${{ hashFiles('**/Cargo.toml') }}

      - name: "Maturin — wheel"
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.system.target }}
          args:  --verbose --release --out dist --manifest-path ${{ env.VA_SRC_PYTHON }}/Cargo.toml --sdist
          sccache: true
          manylinux: auto

      - name: "Workaround for caching permission errors"
        if: matrix.system.os == 'ubuntu-latest'
        run: sudo chmod -R a+r target

      - name: "Upload"
        uses: actions/upload-artifact@v3
        with:
          name: python-wheels
          path: dist


  test-python:
    name: "🐍 Python Tests 🐍"
    needs: build-python
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Download wheel"
        uses: actions/download-artifact@v3
        with:
          name: python-wheels
          path: dist

      - name: "Install wheel"
        id: install
        run: pip install visualacuity --find-links dist --force-reinstall --target=${{ env.VA_SRC_PYTHON }} --upgrade

      - name: "Test with pytest"
        run: |
          pip install pytest pytest-subtests pytest-cov
          cd ${{ env.VA_SRC_PYTHON }}
          python -c "import visualacuity; print(visualacuity.parse_visit({'': 'cf @ 3ft'}))"
          cat ./tests/common/test_cases_parsing.tsv | grep CF
          pytest ./tests --doctest-modules --junitxml=reports/python-test-report.xml # --cov=com --cov-report=xml --cov-report=html

  #      - name: "Test Report"
  #        if: success() || failure()
  #        uses: dorny/test-reporter@v1
  #        with:
  #          name: python-test-report-${{ matrix.python-version }}
  #          path: reports/python-test-report.xml
  #          reporter: jest-junit

  publish-python:
    name: "🐍 Python Publish 🐍"
    runs-on: ubuntu-latest
    needs: test-python

    steps:
      - uses: actions/checkout@v4

      - name: "Download wheels"
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: dist

      - name: "Help (on no-publish)"
        if: ${{ ! startsWith(github.ref, 'refs/tags') }}
        run: |
          VERSION=$(echo dist/*.tar.gz | sed -e 's/.*-\(.*\)\.tar\.gz/\1/')
          echo "## Successfully built & tested `visualacuity-$VERSION`!" >> $GITHUB_STEP_SUMMARY
          echo "To publish this package:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "git tag python-$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "git push --tags" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: "Upload binaries to GitHub Release"
        if: startsWith(github.ref, 'refs/tags/python-') || startsWith(github.ref, 'refs/tags/test-python-')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: ${{ github.ref }}
          overwrite: false
          file_glob: true

      - name: "Publish package to TestPyPI"
        if: startsWith(github.ref, 'refs/tags/test-python-')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: "Publish package to PyPI"
        if: startsWith(github.ref, 'refs/tags/python-')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
